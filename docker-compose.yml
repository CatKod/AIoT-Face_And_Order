version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cafe_postgres
    environment:
      POSTGRES_DB: cafe_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: cafe_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - cafe_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cafe_system"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cafe_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cafe.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin-servers.json:/pgadmin4/servers.json:ro
    ports:
      - "8080:80"
    networks:
      - cafe_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: cafe_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cafe_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Main Cafe Application
  cafe_app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cafe_app
    environment:
      # Database Configuration
      DATABASE_TYPE: postgresql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cafe_system
      DB_USER: postgres
      DB_PASSWORD: cafe_password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      
      # Flask Configuration
      FLASK_HOST: 0.0.0.0
      FLASK_PORT: 5000
      FLASK_DEBUG: "false"
      FLASK_SECRET_KEY: "production-secret-key-change-this"
      
      # Face Recognition Configuration
      FACE_RECOGNITION_TOLERANCE: 0.6
      MAX_FACE_DISTANCE: 0.5
      CUSTOMER_DIR: /app/data/customers
      DATABASE_DIR: /app/data/database
      
      # Recommendation Configuration
      MIN_ORDERS_FOR_RECOMMENDATION: 3
      RECOMMENDATION_WEIGHT_FREQUENCY: 0.4
      RECOMMENDATION_WEIGHT_RECENCY: 0.3
      RECOMMENDATION_WEIGHT_SIMILARITY: 0.3
    volumes:
      - app_data:/app/data
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    networks:
      - cafe_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: cafe_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - app_data:/var/www/static:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - cafe_network
    depends_on:
      - cafe_app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: cafe_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cafe_network
    restart: unless-stopped

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cafe_grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana_password
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - cafe_network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cafe_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
